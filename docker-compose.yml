services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_GRAPHQL_URL=http://backend:${BACKEND_PORT}/graphql
    depends_on:
      - backend

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ./backend:/usr/src/app
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/usr/src/app/target
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${BACKEND_PORT}/ || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:${MONGO_PORT}
    depends_on:
      - postgres
      - mongo

  postgres:
    image: postgres:15-alpine
    container_name: db_main
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"

  mongo:
    image: mongo:6
    container_name: db_sub
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"

volumes:
  cargo-cache:
  target-cache:
  postgres-data:
  mongo-data: 